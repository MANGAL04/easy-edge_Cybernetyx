name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        python easy_edge.py --help
        python -m pytest tests/ -v --cov=. --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build-linux:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Linux executable
      run: |
        python build.py
        
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v3
      with:
        name: easy-edge-linux
        path: dist/easy-edge

  build-macos:
    needs: test
    runs-on: macos-latest
    if: github.event_name == 'release' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build macOS executable
      run: |
        python build.py
        
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v3
      with:
        name: easy-edge-macos
        path: dist/easy-edge

  build-windows:
    needs: test
    runs-on: windows-latest
    if: github.event_name == 'release' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Windows executable
      run: |
        python build.py
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v3
      with:
        name: easy-edge-windows
        path: dist/easy-edge.exe

  create-release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Create release assets
      run: |
        mkdir -p release-assets
        
        # Rename and organize artifacts
        mv easy-edge-linux/easy-edge release-assets/easy-edge-linux-x64
        mv easy-edge-macos/easy-edge release-assets/easy-edge-macos-x64
        mv easy-edge-windows/easy-edge.exe release-assets/easy-edge-windows-x64.exe
        
        # Make Linux executable
        chmod +x release-assets/easy-edge-linux-x64
        
        # Create checksums
        cd release-assets
        sha256sum easy-edge-linux-x64 > easy-edge-linux-x64.sha256
        sha256sum easy-edge-macos-x64 > easy-edge-macos-x64.sha256
        sha256sum easy-edge-windows-x64.exe > easy-edge-windows-x64.exe.sha256
        
    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: release-assets/

  homebrew-update:
    needs: create-release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download release assets
      uses: actions/download-artifact@v3
      with:
        name: release-assets
        
    - name: Calculate SHA256 for Homebrew
      run: |
        echo "SHA256_LINUX=$(sha256sum release-assets/easy-edge-linux-x64 | cut -d' ' -f1)" >> $GITHUB_ENV
        echo "SHA256_MACOS=$(sha256sum release-assets/easy-edge-macos-x64 | cut -d' ' -f1)" >> $GITHUB_ENV
        
    - name: Update Homebrew formula
      run: |
        # This would update your homebrew formula with new version and checksums
        # You'll need to implement this based on your homebrew setup
        echo "Homebrew formula update would happen here"
        
    - name: Commit and push Homebrew updates
      run: |
        # This would commit and push the updated formula
        # You'll need to set up proper authentication for this
        echo "Homebrew formula commit would happen here" 